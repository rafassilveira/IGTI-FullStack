{"ast":null,"code":"var _jsxFileName = \"/workspace/IGTI-FullStack/Modulo 3 - React/aula-08/_react-desafio-02/src/App.js\";\nimport React, { Component } from \"react\";\nimport Countries from \"./components/countries/Countries\";\nimport Header from \"./components/header/Header\";\nexport default class App extends Component {\n  constructor() {\n    super();\n\n    this.calculateTotalPopulationFrom = countries => {\n      const totalPopulation = countries.reduce((acc, current) => {\n        return acc + current.population;\n      }, 0);\n      return totalPopulation;\n    };\n\n    this.handleChangeFilter = newText => {\n      this.setState({\n        filter: newText\n      });\n      const filterLowerCase = newText.toLowerCase();\n      const filteredCountries = this.state.allCountries.filter(country => {\n        return country.filterName.includes(filterLowerCase);\n      });\n      const filterPopulation = this.calculateTotalPopulationFrom(filteredCountries);\n      this.setState({\n        filteredCountries,\n        filterPopulation\n      });\n    };\n\n    this.state = {\n      allCountries: [],\n      // boa pratica criar outra varipavel com os paises filtrados\n      filteredCountries: [],\n      filterPopulation: 0,\n      // os estados do react do tipo input não podem ser null ou undefined\n      filter: \"\"\n    };\n  } // componentDidMount é um bom lugar para inserir requisições já que onde inicia\n  // o componente\n\n\n  async componentDidMount() {\n    const res = await fetch(\" https://restcountries.eu/rest/v2/all\");\n    const json = await res.json(); // Fazendo um map dentro do resultado da requisição a api para trazer alguns\n    // dados da API, dentro do map estamos fazendo a desestruturação direto\n\n    const allCountries = json.map(({\n      numericCode,\n      name,\n      flag,\n      population\n    }) => {\n      return {\n        id: numericCode,\n        name,\n        filterName: name.toLowerCase(),\n        flag,\n        population\n      };\n    });\n    const filterPopulation = this.calculateTotalPopulationFrom(allCountries);\n    this.setState({\n      //allCountries:allCountries\n      allCountries,\n      filteredCountries: Object.assign([], allCountries),\n      filterPopulation\n    });\n  }\n\n  render() {\n    const {\n      filteredCountries,\n      filter,\n      filterPopulation\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"h1\", {\n      style: styles.centeredTitle,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }\n    }, \"React Countries\"), /*#__PURE__*/React.createElement(Header, {\n      filter: filter,\n      countryCount: filteredCountries.length,\n      totalPopulation: filterPopulation,\n      onChangeFilter: this.handleChangeFilter,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(Countries, {\n      countries: filteredCountries,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\nconst styles = {\n  centeredTitle: {\n    textAlign: \"center\"\n  }\n};","map":{"version":3,"sources":["/workspace/IGTI-FullStack/Modulo 3 - React/aula-08/_react-desafio-02/src/App.js"],"names":["React","Component","Countries","Header","App","constructor","calculateTotalPopulationFrom","countries","totalPopulation","reduce","acc","current","population","handleChangeFilter","newText","setState","filter","filterLowerCase","toLowerCase","filteredCountries","state","allCountries","country","filterName","includes","filterPopulation","componentDidMount","res","fetch","json","map","numericCode","name","flag","id","Object","assign","render","styles","centeredTitle","length","textAlign"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Countries from \"./components/countries/Countries\";\nimport Header from \"./components/header/Header\";\nexport default class App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      allCountries: [],\n      // boa pratica criar outra varipavel com os paises filtrados\n      filteredCountries: [],\n      filterPopulation: 0,\n      // os estados do react do tipo input não podem ser null ou undefined\n      filter: \"\",\n    };\n  }\n\n  // componentDidMount é um bom lugar para inserir requisições já que onde inicia\n  // o componente\n  async componentDidMount() {\n    const res = await fetch(\" https://restcountries.eu/rest/v2/all\");\n    const json = await res.json();\n    // Fazendo um map dentro do resultado da requisição a api para trazer alguns\n    // dados da API, dentro do map estamos fazendo a desestruturação direto\n    const allCountries = json.map(({ numericCode, name, flag, population }) => {\n      return {\n        id: numericCode,\n        name,\n        filterName: name.toLowerCase(),\n        flag,\n        population,\n      };\n    });\n\n    const filterPopulation = this.calculateTotalPopulationFrom(allCountries);\n\n    this.setState({\n\t\t\t//allCountries:allCountries\n      allCountries,\n      filteredCountries: Object.assign([], allCountries),\n      filterPopulation,\n    });\n  }\n  calculateTotalPopulationFrom = (countries) => {\n    const totalPopulation = countries.reduce((acc, current) => {\n      return acc + current.population;\n    }, 0);\n    return totalPopulation;\n  };\n  // var newText é o evento que o usuario digitou\n  handleChangeFilter = (newText) => {\n    this.setState({\n      filter: newText,\n    });\n    const filterLowerCase = newText.toLowerCase();\n\n    const filteredCountries = this.state.allCountries.filter((country) => {\n      return country.filterName.includes(filterLowerCase);\n    });\n\n    const filterPopulation = this.calculateTotalPopulationFrom(\n      filteredCountries\n    );\n\n    this.setState({\n      filteredCountries,\n      filterPopulation,\n    });\n  };\n  render() {\n    const { filteredCountries, filter, filterPopulation } = this.state;\n    return (\n      <div className=\"container\">\n        <h1 style={styles.centeredTitle}>React Countries</h1>\n        <Header\n          filter={filter}\n          countryCount={filteredCountries.length}\n          totalPopulation={filterPopulation}\n          onChangeFilter={this.handleChangeFilter}\n        />\n        <Countries countries={filteredCountries} />\n      </div>\n    );\n  }\n}\nconst styles = {\n  centeredTitle: {\n    textAlign: \"center\",\n  },\n};\n"]},"metadata":{},"sourceType":"module"}